/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/main.js":
/*!************************!*\
  !*** ./src/js/main.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

document.addEventListener('DOMContentLoaded', function () {
	async function getJsonFile() {
		const result = await fetch('./js/data.json');
		const dataList = await result.json();

		dataList.forEach((data) => {
			let innerContent = document.getElementById('inner-content');
			let box = document.createElement('div');
			box.classList.add('box');

			let dataFilter = [
				data.role,
				data.level,
				...data.tools,
				...data.languages,
			];

			let filterList = document.createElement('ul');
			filterList.classList.add('filter__list');

			if (data.new == true && data.featured == true) {
				box.classList.add('special');
			}

			box.innerHTML = `
            <div class="box__logo">
            <img src="${data.logo}" alt="svg" />
        </div>
        <div class="box__content">
            <div class="box__top">
                <h3 class="box__top-title">${data.company}</h3>
            ${
							data.new == true
								? `<button class="box__top-new">New</button>`
								: ''
						}


            ${
							data.featured == true
								? ` <button class="box__top-featured">Featured</button>`
								: ''
						}              

               
             </div>
            <h1 class="box__title">${data.position}</h1>
            <ul class="box__list">
                <li class="box__list-item">${data.postedAt}</li>
                <li class="box__list-item">${data.contract}</li>
                <li class="box__list-item">${data.location}</li>
            </ul>
        </div>
            `;

			dataFilter.forEach((data) => {
				let filterItem = document.createElement('li');
				filterItem.classList.add('filter__list-item', 'btn');

				filterItem.innerHTML = `
                     <span class="filter__text"> ${data} </span>
                    `;

				filterList.appendChild(filterItem);
			});

			innerContent.appendChild(box);
			box.appendChild(filterList);
		});
	}

	getJsonFile().catch(alert);
});


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf8;base64,
